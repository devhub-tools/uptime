name: Build and publish app image

on: # yamllint disable-line rule:truthy
  push:
    branches:
      - main
      - docker
    paths:
      - ./*
      - .github/workflows/publish-app.yaml

permissions:
  contents: read
  packages: write

env:
  DESCRIPTION: An uptime watcher for your services

jobs:
  build-and-push-image:
    # TODO: waiting on github arm runners
    # strategy:
    #   matrix:
    #     runs-on: [ubuntu-latest, ubuntu-arm]
    # runs-on: ${{ matrix.runs-on }}
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'skipci')"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: latest=auto
          tags: type=sha

      - name: Cache
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            app-deps
            app-build-prod
          key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}

      - name: inject cache into docker
        uses: reproducible-containers/buildkit-cache-dance@v3.1.0
        with:
          cache-map: |
            {
              "app-deps": "/deps",
              "app-build-prod": "/_build/prod"
            }
          skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          # outputs: type=docker,dest=/tmp/${{ runner.arch }}-${{ github.sha }}.tar
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.name=uptime
            org.opencontainers.image.source=https://github.com/${{ github.repository }}/tree/main
            org.opencontainers.image.description=${{ env.DESCRIPTION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.arch }}-${{ github.sha }}.tar
          path: /tmp/${{ runner.arch }}-${{ github.sha }}.tar

  # manifest:
  #   runs-on: ubuntu-latest
  #   needs: [build]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Log in to the Container registry
  #       uses: docker/login-action@v2
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #         token_format: access_token

  #     - name: Download x64 artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: X64-${{ github.sha }}.tar
  #         path: /tmp

  #     - name: Download arm64 artifact
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ARM64-${{ github.sha }}.tar
  #         path: /tmp

  #     - name: Create and push manifest
  #       run: |
  #         docker load --input /tmp/ARM64-${{ github.sha }}.tar
  #         docker load --input /tmp/X64-${{ github.sha }}.tar
  #         docker push ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}:X64-${{ github.sha }}
  #         docker push ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}:ARM64-${{ github.sha }}
  #         docker manifest create ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}:latest --amend ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}:X64-${{ github.sha }} --amend ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}:ARM64-${{ github.sha }}
  #         docker manifest push ghcr.io/${{ github.actor }}/${{ env.IMAGE_NAME }}:latest
