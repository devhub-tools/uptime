// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: uptime/v1/uptime.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UptimeService_Check_FullMethodName = "/uptime.v1.UptimeService/Check"
)

// UptimeServiceClient is the client API for UptimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UptimeServiceClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type uptimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUptimeServiceClient(cc grpc.ClientConnInterface) UptimeServiceClient {
	return &uptimeServiceClient{cc}
}

func (c *uptimeServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, UptimeService_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UptimeServiceServer is the server API for UptimeService service.
// All implementations must embed UnimplementedUptimeServiceServer
// for forward compatibility
type UptimeServiceServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	mustEmbedUnimplementedUptimeServiceServer()
}

// UnimplementedUptimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUptimeServiceServer struct {
}

func (UnimplementedUptimeServiceServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedUptimeServiceServer) mustEmbedUnimplementedUptimeServiceServer() {}

// UnsafeUptimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UptimeServiceServer will
// result in compilation errors.
type UnsafeUptimeServiceServer interface {
	mustEmbedUnimplementedUptimeServiceServer()
}

func RegisterUptimeServiceServer(s grpc.ServiceRegistrar, srv UptimeServiceServer) {
	s.RegisterService(&UptimeService_ServiceDesc, srv)
}

func _UptimeService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UptimeServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UptimeService_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UptimeServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UptimeService_ServiceDesc is the grpc.ServiceDesc for UptimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UptimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uptime.v1.UptimeService",
	HandlerType: (*UptimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _UptimeService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "uptime/v1/uptime.proto",
}
